//For deleting your entire prisma database, open the terminal and type: "npx prisma migrate reset" & then type: "npx prisma db push"

datasource db {
  provider  = "postgresql"
  url  	    = env( "DATABASE_URL" )
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}
model User {
  id                    String    @id @default( cuid() )
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime? @map( "email_verified" )
  image                 String?
  password              String?
  role                  UserRole @default( USER )
  accounts              Account[]
  isTwoFactorEnabled    Boolean @default( false )
  twoFactorConfirmation TwoFactorConfirmation?
 
  @@map( "users" )
}

model Account {
  id                 String  @id @default( cuid() )
  userId             String  @map( "user_id" )
  type               String
  provider           String
  providerAccountId  String  @map( "provider_account_id" )
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation( fields: [ userId ], references: [ id ], onDelete: Cascade )
 
  @@unique([ provider, providerAccountId ])
  @@map( "accounts" )
}

model VerificationToken {
  id      String @id @default( cuid() )
  email   String
  token   String @unique
  expires DateTime

  @@unique([ email, token ]) //i.e. only 1 unique token for a specefic email
  @@map( "verificationTokens" ) 
}

model PasswordResetToken {
  id      String @id @default( cuid() )
  email   String
  token   String @unique
  expires DateTime

  @@unique([ email, token ])
  @@map( "passwordResetTokens" )
}

model TwoFactorToken {
  id      String @id @default( cuid() )
  email   String
  token   String @unique
  expires DateTime

  @@unique([ email, token ])
  @@map( "twoFactorTokens" )
}

model TwoFactorConfirmation {
  id    String @id @default( cuid() )
  userId String
  user User @relation( fields: [ userId ], references: [ id ], onDelete: Cascade )

  @@unique([ userId ])
  @@map( "twoFactorConfirmations" )
}
